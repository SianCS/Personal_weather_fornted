import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { privateApi } from "../api";
import LoadingUi from "./LoadingUi";

// --- UI Component (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ) ---


// üîΩ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° export  ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
export function FiveDayForecast({ cityId }) {
    const [forecast, setForecast] = useState([]);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        if (!cityId) return;
        setLoading(true);
        privateApi.get(`/weather/${cityId}/forecast`)
            .then(res => {
                // ‚ú® HIGHLIGHT: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
                // ‡πÇ‡∏î‡∏¢‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á Object ‡∏ó‡∏µ‡πà‡∏°‡∏µ key ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (e.g., "2025-07-13")
                // ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÜ
                const dailyForecasts = Object.values(
                    res.data.forecasts.reduce((acc, item) => {
                        const date = item.time.split(' ')[0];
                        if (!acc[date]) {
                            acc[date] = item;
                        }
                        return acc;
                    }, {})
                );
                setForecast(dailyForecasts);
            })
            .catch(() => toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ"))
            .finally(() => setLoading(false));
    }, [cityId]);
    
    if (!cityId) return null;
    if (loading) return <div className="card bg-base-100/50 backdrop-blur-sm shadow-xl w-full min-h-[10rem] flex justify-center items-center"><LoadingUi text="‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå..."/></div>;

    return (
        <div className="card bg-base-100/50 backdrop-blur-sm shadow-xl w-full">
            <div className="card-body">
                <h2 className="card-title flex justify-center">‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤</h2>
                <p className="text-xs opacity-70">(‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ó‡∏∏‡∏Å 3 ‡∏ä‡∏°)</p>
                <div className="flex justify-between overflow-x-auto">
                    {forecast.slice(0, 5).map(day => (
                        <div key={day.time} className="flex flex-col items-center text-center p-2 rounded-lg hover:bg-white/50 transition flex-shrink-0 w-24">
                            <p className="font-semibold text-sm">{new Date(day.time).toLocaleDateString('th-TH', { weekday: 'short' })}</p>
                            <img src={day.icon} alt={day.description} className="w-14 h-14"/>
                            <p className="font-bold text-xl">{Math.round(day.temperature)}¬∞</p>
                            
                            {/* ‚ú® HIGHLIGHT: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
                            <p className="text-xs text-gray-600">‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å {Math.round(day.feels_like)}¬∞</p>
                            <p className="text-xs capitalize text-blue-800 mt-1 h-8 truncate" title={day.description}>{day.description}</p>
                            
                            {day.chanceOfRain > 0 && (
                                <div className="flex items-center text-xs text-blue-600 font-semibold mt-1">
                                    <span>üíß {day.chanceOfRain}%</span>
                                </div>
                            )}
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};

