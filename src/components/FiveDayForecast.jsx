import { useEffect, useState } from "react";
import { toast } from "react-toastify";
import { privateApi } from "../api";

// --- UI Component (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ) ---
const LoadingSpinner = ({ text = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î..." }) => (
    <div className="flex items-center justify-center h-full text-gray-500">
        <span className="loading loading-dots loading-lg"></span>
        <p className="ml-2">{text}</p>
    </div>
);

// üîΩ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° export  ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
export function FiveDayForecast({ cityId }) {
    const [forecast, setForecast] = useState([]);
    const [loading, setLoading] = useState(false);

    useEffect(() => {
        if (!cityId) return;
        setLoading(true);
        privateApi.get(`/weather/${cityId}/forecast`)
            .then(res => {
                // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô
                const dailyForecasts = Object.values(
                    res.data.forecasts.reduce((acc, item) => {
                        const date = item.time.split(' ')[0];
                        if (!acc[date]) {
                            acc[date] = item;
                        }
                        return acc;
                    }, {})
                );
                setForecast(dailyForecasts);
            })
            .catch((err) => { // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                // ‡πÅ‡∏™‡∏î‡∏á Error ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô Console ‡∏Ç‡∏≠‡∏á‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå
                console.error("Forecast API Error:", err.response || err);
                
                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
                const errorMessage = err.response?.data?.error || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô‡πÑ‡∏î‡πâ";
                toast.error(errorMessage);
            })
            .finally(() => setLoading(false));
    }, [cityId]);
    
    if (!cityId) return null;
    if (loading) return <div className="card bg-base-100/50 backdrop-blur-sm shadow-xl w-full min-h-[10rem] flex justify-center items-center"><LoadingSpinner text="‡πÇ‡∏´‡∏•‡∏î‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå..."/></div>;

    return (
        <div className="card bg-base-100/50 backdrop-blur-sm shadow-xl w-full">
            <div className="card-body">
                <h2 className="card-title mx-auto">‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå 5 ‡∏ß‡∏±‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤</h2>
                <div className="flex justify-between overflow-x-auto">
                    {forecast.slice(0, 5).map(day => (
                        <div key={day.time} className="flex flex-col items-center text-center p-2 flex-shrink-0">
                            <p className="font-semibold text-sm">{new Date(day.time).toLocaleDateString('th-TH', { weekday: 'short' })}</p>
                            <img src={day.icon} alt={day.description} className="w-12 h-12"/>
                            <p className="font-bold">{Math.round(day.temperature)}¬∞</p>
                        </div>
                    ))}
                </div>
            </div>
        </div>
    );
};
